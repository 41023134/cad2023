var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n 倉儲: 41023134/cad2023 \n 網站: https://41023134.github.io/cad2023/ \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Replit', 'text': '1.先按Create創建一個repl,然後按Import from Github導入cad2023開頭的倉儲 \n 2.導入倉儲,首先第一件要做的事是在Shell下執行git submodule update --init --recursive, \n 目的在於取下cmsite倉儲中子模組的檔案。 \n 3.然後在Shell下執行pip install flask flask_cors bs4 lxml pelican markdown gevent, \n 來安裝cmsimde需要的模組。 \n 4.切換到主函式main.py並按Run執行。 \n 5.若要推送到遠端Github,要用Version Control,打上標題然後按Commit All &Push。 \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Wink', 'text': '', 'tags': '', 'url': 'Wink.html'}, {'title': 'pms_wink', 'text': 'Perpetual Motion Simulator繪製過程 \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n', 'tags': '', 'url': 'pms_wink.html'}, {'title': 'PMS', 'text': '有關磁力吸引的鋼球循環運動系統，電腦輔助設計與實習課程的任務一即可根據此一裝置的設計, 先採用電腦輔助設計軟體, 繪製系統所需的 3D 零組件, 然後轉為 STL 格式, import 進入 CoppeliaSim, 接著根據影片說明, 利用近接感測器控制電磁鐵開關, 設法透過磁力吸引讓鋼球具有足夠動能返回圓形平台. \n 1.完成一次返回平台(利用接近感測器感測到時，給一個力) perpetual motion simulator1_1.ttt \n 2.完成重複返回平台(利用反方向的Torque阻止重複滾動導致的加速，但球在平台上一直滾動不下來) \n perpetual motion simulator1_2.ttt \n \n 3.修改漏斗圖檔(倒角)，解決球在平台不下來的問題，調整第二感測器位置，可多次運行(非永動) \n perpetual motion simulator1_3.ttt \n \n', 'tags': '', 'url': 'PMS.html'}, {'title': 's1511', 'text': '如何連線s1511.cycu.org並執行動態網站? \n 1.首先要開啟cmd(小黑窗)中執行ssh cad(學號)@s1511.cycu.org \n \xa0 *若要用可攜中start.bat中的cmd要先將start.bat用編譯器打開並將第三行蓋掉,然後重新啟動。 \n 2.執行完會要你打密碼,密碼在學校Mail2000,10/28的一封s1511.cycu.org 帳號通知信裡。 \n 3.連線完會進到OpenSSH SSH client的黑窗,再來是要生成ssh的key,在黑框中執行ssh-keygen。 \n 4.接下來就是要用FileZilla連線s1511.cycu.org將.ssh目錄下的id_rsa.pub拉到本地的目錄中, \n \xa0 \xa0再用編譯器打開,並將內容送入到Github->Settings->SSH and GPG keys。 \n 5.然後下載config並用FileZilla送進.ssh目錄下 \n 6.然後在OpenSSH SSH client中執行以下三個指令: \n \xa0 \xa01.git config --global user.name "Github帳號名" \n \xa0 \xa02.git config --global user.email "Github信箱" \n \xa0 \xa03.git config --global http.proxy http://p4.cycu.org:3128 \n 7.將遠端Github的倉儲克隆下來,有以下兩種方法: \n \xa0 \xa01.http協定:git clone --recurse-submodules https://github.com/41023134/cad2023.git \n \xa0 \xa02.ssh協定:git clone --recurse-submodules git@github.com:41023134/cad2023.git \n \xa0 *由於克隆的方式不一樣倉儲中.git中的config設定也不同,因為最後是要用ssh推送到Github, \n \xa0 \xa0用https克隆的要將config設定改成ssh的樣子,也就是將 https://github.com/41023134/cad2023.git \n \xa0 \xa0改成git@github.com:41023134/cad2023.git \n 8.再來要下載server.py的檔案用編輯器將自己9開頭的埠號輸入並將檔案用FileZilla送到倉儲目錄下 \n 9.然後在小黑窗執行cd site-xxxxxxxx移動到倉儲目錄下執行python3 server.py(沒出現東西就算成功) \n 10.在firefox或waterfox中執行https:s1511.cycu.org:8xxx \n \xa0 *若有設定proxy要關掉 \n \n', 'tags': '', 'url': 's1511.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};